[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'


[tool.poetry]
name = "django-tenant-users"
description = "A Django app to extend django-tenants to incorporate global multi-tenant users"
version = "1.3.0"
license = "MIT License"

packages = [
  { include = 'tenant_users' },
]

authors = [
  "Corvia Technologies, LLC <support@corvia.tech>",
]

readme = "README.rst"

repository = "https://www.github.com/Corvia/django-tenant-users"

keywords = [
  "django",
  "django-tenant-users",
]

classifiers = [
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[tool.poetry.dependencies]
python = "^3.7"
Django = ">=3.2"
django-tenants = "^3.4.5"


[tool.poetry.group.test.dependencies]
# Type Checking
mypy = ">=0.981,<1.5"
django-stubs = ">=1.12,<5.0"

# Code Quality
nitpick = ">=0.32,<0.34"
safety = ">=2.2,<4.0"
black = ">=22.8,<24.0"
ruff = ">=0.1.14,<0.4.0"

# Testing Utilities
pytest = "^7.2.2"
pytest-cov = "^4.0"
pytest-randomly = "^3.12"
pytest-django = "^4.5.2"
pytest-deadfixtures = "^2.2.1"
pytest-testmon = ">=1.3.3,<3.0.0"
pytest-timeout = "^2.1.0"
hypothesis = "^6.55.0"

# Documentation and Formatting
doc8 = ">=0.11,<1.2"

# Configuration and Database
tomlkit = ">=0.11,<0.13"
python-decouple = "^3.6"
psycopg2-binary = "^2.9.6"


[tool.poetry.group.docs]
optional = true


[tool.poetry.group.docs.dependencies]
sphinx = ">=5.0,<8.0"
sphinx-rtd-theme = ">=1.3,<3.0"
sphinx-autodoc-typehints = "^1.19.5"
m2r2 = "^0.3"
psycopg2-binary = "^2.9.6"
tomli = "^2.0.1"


[tool.doc8]
max-line-length = 88


[tool.ruff]
line-length = 88
target-version = "py37"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "COM812",   # "Trailing comma missing". If black is happy, I'm happy.
    "D1",        # Docstrings related
    "E501",     # "Line too long". If black is happy, I'm happy.
    "EM101",    # "Exception must not use a string literal, assign to variable first"
    "EM102",    # "Exception must not use an f-string literal, assign to variable first"
    "PTH",      # User Pathlib stuff over os.*. Should migrate to Pathlib at some point.
    "RET504",   # "Unnecessary variable assignment before `return` statement"
    "S101",     # "Use of `assert` detected"
    "SIM108",   # "Use ternary operator ...". Ternary is harmful for readability in some cases.
    "TRY003",   # "Avoid specifying long messages outside the exception class"
    ]

[tool.ruff.lint.per-file-ignores]
"**/migrations/*" = ["RUF012"]
"docs/conf.py" = ["INP001"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"
